name: CI

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint:
    name: Lint & Style (non-fatal)
    runs-on: ubuntu-latest
    continue-on-error: true # <â€” makes this job non-blocking
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install linters/formatters
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.* black==24.*

      - name: Ruff (lint)
        run: ruff check .
        continue-on-error: true

      - name: Ruff (format check)
        run: ruff format --check .
        continue-on-error: true

      - name: Black (format check)
        run: black --check .
        continue-on-error: true

  tests:
    name: Tests (py${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: hpc_user
          POSTGRES_PASSWORD: muict
          POSTGRES_DB: hpc_app
        # optional healthcheck for nicer logs; the job will still start immediately
        options: >-
          --health-cmd="pg_isready -U hpc_user -d hpc_app"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
        ports:
          - 5432:5432

    env:
      # App/env config for tests
      DATABASE_URL: postgresql+psycopg2://hpc_user:muict@localhost:5432/hpc_app
      FLASK_SECRET_KEY: test-secret
      APP_ENV: test
      AUTO_CREATE_SCHEMA: "1"
      SEED_DEMO_USERS: "0"
      METRICS_ENABLED: "0"
      FALLBACK_CSV: ${{ github.workspace }}/instance/test.csv
      PYTHONUNBUFFERED: "1"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Wait for Postgres
        run: |
          python - <<'PY'
          import os, time, sys
          import psycopg2
          url = os.environ["DATABASE_URL"]
          for i in range(60):
              try:
                  conn = psycopg2.connect(url)
                  conn.close()
                  print("Postgres is up")
                  sys.exit(0)
              except Exception as e:
                  time.sleep(1)
          print("Postgres did not become ready in time", file=sys.stderr)
          sys.exit(1)
          PY

      - name: Run tests
        run: |
          pytest -q --cov=. --cov-branch
        # You can add -k to focus, or --maxfail=1 if desired

      - name: Generate HTML coverage
        if: always()
        run: coverage html

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-py${{ matrix.python-version }}
          path: htmlcov
