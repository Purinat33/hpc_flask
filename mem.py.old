# app.py
import os
import json
from flask import Flask, request, jsonify, render_template_string, abort

app = Flask(__name__)

RATES_FILE = os.environ.get("RATES_FILE", "rates.json")
# for optional update endpoint
ADMIN_TOKEN = os.environ.get("ADMIN_TOKEN", "change-me")

# Default per-hour rates (฿/hour)
DEFAULT_RATES = {
    "mu":      {"cpu": 1.0,  "gpu": 5.0,   "mem": 0.5},   # University
    "gov":     {"cpu": 3.0,  "gpu": 10.0,  "mem": 1.0},   # Government
    "private": {"cpu": 5.0,  "gpu": 100.0, "mem": 2.0},   # Private
}


def load_rates():
    if not os.path.exists(RATES_FILE):
        save_rates(DEFAULT_RATES)
        return DEFAULT_RATES
    with open(RATES_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    # ensure all tiers exist; fill missing with defaults
    merged = DEFAULT_RATES.copy()
    merged.update({k.lower(): v for k, v in data.items()})
    return merged


def save_rates(rates):
    with open(RATES_FILE, "w", encoding="utf-8") as f:
        json.dump(rates, f, ensure_ascii=False, indent=2)


@app.get("/formula")
def get_formula():
    """
    GET /formula?type=mu|gov|private
    Returns per-hour rate constants: {cpu, gpu, mem}.
    """
    tier = (request.args.get("type") or "mu").lower()
    rates = load_rates()
    if tier not in rates:
        return jsonify({"error": f"unknown type '{tier}'"}), 400
    return jsonify({
        "type": tier,
        "unit": "per-hour",
        "rates": rates[tier],   # {cpu, gpu, mem}
        "currency": "THB"
    })


@app.post("/formula")
def update_formula():
    """
    OPTIONAL admin endpoint to update a tier:
    POST /formula  JSON: {"type":"mu|gov|private","cpu":1.2,"gpu":6,"mem":0.7}
    Header: X-Admin-Token: <ADMIN_TOKEN>
    """
    token = request.headers.get("X-Admin-Token", "")
    if token != ADMIN_TOKEN:
        abort(403)
    payload = request.get_json(force=True, silent=True) or {}
    tier = (payload.get("type") or "").lower()
    if tier not in {"mu", "gov", "private"}:
        return jsonify({"error": "type must be one of mu|gov|private"}), 400
    try:
        cpu = float(payload["cpu"])
        gpu = float(payload["gpu"])
        mem = float(payload["mem"])
    except Exception:
        return jsonify({"error": "cpu, gpu, mem must be numeric"}), 400
    rates = load_rates()
    rates[tier] = {"cpu": cpu, "gpu": gpu, "mem": mem}
    save_rates(rates)
    return jsonify({"ok": True, "updated": {tier: rates[tier]}})


# Simple HTML playground
PAGE = """
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>HPC Cost Playground</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    body { font-family: system-ui, Arial, sans-serif; margin: 2rem; }
    .card { max-width: 760px; padding: 1rem 1.25rem; border: 1px solid #ddd; border-radius: 12px; }
    .row { display: grid; grid-template-columns: 1fr 1fr; gap: 0.75rem; margin-bottom: 0.75rem; }
    label { display: block; font-weight: 600; margin-bottom: 0.25rem; }
    input, select { width: 100%; padding: 0.6rem; border: 1px solid #bbb; border-radius: 8px; }
    .muted { color: #666; font-size: 0.9rem; }
    .total { font-size: 1.25rem; font-weight: 800; margin-top: 1rem; }
    .breakdown { margin-top: 0.5rem; color: #444; }
    .pill { display: inline-block; margin-right: .5rem; margin-top: .35rem; padding: .25rem .5rem; border-radius: 999px; background:#f3f4f6; }
    .error { color: #b00020; margin-top: .5rem; }
  </style>
</head>
<body>
  <h2>HPC Cost Playground</h2>
  <p class="muted">Rates are fetched from <code>/formula?type=...</code> (per-hour). Choose a customer type and enter resources + duration.</p>

  <div class="card">
    <div class="row">
      <div>
        <label>Customer type</label>
        <select id="tier">
          <option value="mu">MU (University)</option>
          <option value="gov">Gov (Government)</option>
          <option value="private">Private</option>
        </select>
      </div>
      <div>
        <label>Duration amount</label>
        <input id="amount" type="number" min="1" step="1" value="1" />
      </div>
    </div>

    <div class="row">
      <div>
        <label>Duration unit</label>
        <select id="unit">
          <option value="hour">Hour(s)</option>
          <option value="day">Day(s)</option>
          <option value="month">Month(s)</option>
        </select>
      </div>
      <div>
        <label>CPU cores</label>
        <input id="cpu" type="number" min="0" step="1" value="1" />
      </div>
    </div>

    <div class="row">
      <div>
        <label>GPU count</label>
        <input id="gpu" type="number" min="0" step="1" value="0" />
      </div>
      <div>
        <label>Memory (GB)</label>
        <input id="mem" type="number" min="0" step="1" value="1" />
      </div>
    </div>

    <div class="muted">
      <span class="pill" id="showCpuRate">cpu: —</span>
      <span class="pill" id="showGpuRate">gpu: —</span>
      <span class="pill" id="showMemRate">mem: —</span>
      <span class="pill" id="showUnit">unit: per-hour</span>
      <span class="pill">currency: THB</span>
    </div>

    <div class="total" id="total">Total: ฿0.00</div>
    <div class="breakdown" id="breakdown"></div>
    <div class="error" id="error"></div>
  </div>

<script>
  const tierEl = document.getElementById('tier');
  const amountEl = document.getElementById('amount');
  const unitEl = document.getElementById('unit');
  const cpuEl = document.getElementById('cpu');
  const gpuEl = document.getElementById('gpu');
  const memEl = document.getElementById('mem');
  const totalEl = document.getElementById('total');
  const breakdownEl = document.getElementById('breakdown');
  const errorEl = document.getElementById('error');
  const showCpuRate = document.getElementById('showCpuRate');
  const showGpuRate = document.getElementById('showGpuRate');
  const showMemRate = document.getElementById('showMemRate');
  const showUnit = document.getElementById('showUnit');

  let rates = { cpu: 0, gpu: 0, mem: 0 };
  let unitLabel = "per-hour";

  function hoursFrom(amount, unit) {
    const n = Number(amount) || 0;
    if (unit === 'day')   return n * 24;
    if (unit === 'month') return n * 720; // 30d x 24h
    return n; // hour
  }

  async function fetchRates() {
    errorEl.textContent = "";
    const type = tierEl.value;
    try {
      const res = await fetch(`/formula?type=${encodeURIComponent(type)}`);
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const data = await res.json();
      rates = data.rates || {cpu:0,gpu:0,mem:0};
      unitLabel = data.unit || "per-hour";
      showCpuRate.textContent = `cpu: ฿${rates.cpu}/cpu-hour`;
      showGpuRate.textContent = `gpu: ฿${rates.gpu}/gpu-hour`;
      showMemRate.textContent = `mem: ฿${rates.mem}/GB-hour`;
      showUnit.textContent = `unit: ${unitLabel}`;
      recalc();
    } catch (e) {
      errorEl.textContent = `Failed to fetch rates for ${type}: ${e}`;
      rates = { cpu: 0, gpu: 0, mem: 0 };
      recalc();
    }
  }

  function recalc() {
    const cores = Number(cpuEl.value) || 0;
    const gpus  = Number(gpuEl.value) || 0;
    const memGB = Number(memEl.value) || 0;
    const hrs   = hoursFrom(amountEl.value, unitEl.value);

    const cpuCost = cores * hrs * rates.cpu;
    const gpuCost = gpus  * hrs * rates.gpu;
    const memCost = memGB * hrs * rates.mem;
    const total   = cpuCost + gpuCost + memCost;

    totalEl.textContent = `Total: ฿${total.toFixed(2)}`;
    breakdownEl.textContent =
      `CPU: ฿${cpuCost.toFixed(2)}  |  GPU: ฿${gpuCost.toFixed(2)}  |  MEM: ฿${memCost.toFixed(2)}  (duration: ${hrs} h)`;
  }

  // Recalculate on input changes
  [tierEl, amountEl, unitEl, cpuEl, gpuEl, memEl].forEach(el => {
    el.addEventListener('input', () => {
      if (el === tierEl) fetchRates(); else recalc();
    });
    el.addEventListener('change', () => {
      if (el === tierEl) fetchRates(); else recalc();
    });
  });

  // Initial load
  fetchRates();
</script>
</body>
</html>
"""


@app.get("/")
@app.get("/playground")
def playground():
    return render_template_string(PAGE)


if __name__ == "__main__":
    # pip install flask
    print("Started mem.py")
    app.run(host="0.0.0.0", port=8000, debug=True)
