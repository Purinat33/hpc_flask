"""initial schema (sqlite -> pg equivalent)

Revision ID: 27631cf6e931
Revises: 
Create Date: 2025-09-10 11:41:16.517620

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '27631cf6e931'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ts', sa.String(), nullable=False),
    sa.Column('actor', sa.String(), nullable=True),
    sa.Column('ip', sa.String(), nullable=True),
    sa.Column('ua', sa.String(), nullable=True),
    sa.Column('method', sa.String(), nullable=True),
    sa.Column('path', sa.String(), nullable=True),
    sa.Column('action', sa.String(), nullable=False),
    sa.Column('target', sa.String(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('extra', sa.Text(), nullable=True),
    sa.Column('prev_hash', sa.String(), nullable=True),
    sa.Column('hash', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('auth_throttle',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('ip', sa.String(), nullable=False),
    sa.Column('window_start', sa.String(), nullable=True),
    sa.Column('fail_count', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_auth_throttle_user_ip', 'auth_throttle', ['username', 'ip'], unique=True)
    op.create_table('payment_events',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.String(), nullable=False),
    sa.Column('external_event_id', sa.String(), nullable=True),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('raw', sa.Text(), nullable=False),
    sa.Column('signature_ok', sa.Integer(), nullable=False),
    sa.Column('received_at', sa.String(), nullable=False),
    sa.CheckConstraint('signature_ok IN (0,1)', name='ck_paymentevents_signature_ok'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('provider', 'external_event_id', name='uq_paymentevents_provider_external')
    )
    op.create_table('rates',
    sa.Column('tier', sa.String(), nullable=False),
    sa.Column('cpu', sa.Float(), nullable=False),
    sa.Column('gpu', sa.Float(), nullable=False),
    sa.Column('mem', sa.Float(), nullable=False),
    sa.Column('updated_at', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('tier')
    )
    op.create_table('receipts',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('start', sa.String(), nullable=False),
    sa.Column('end', sa.String(), nullable=False),
    sa.Column('total', sa.Float(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.String(), nullable=False),
    sa.Column('paid_at', sa.String(), nullable=True),
    sa.Column('method', sa.String(), nullable=True),
    sa.Column('tx_ref', sa.String(), nullable=True),
    sa.CheckConstraint("status in ('pending','paid','void')", name='ck_receipts_status'),
    sa.CheckConstraint('total >= 0', name='ck_receipts_total_ge_0'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('password_hash', sa.Text(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('created_at', sa.String(), nullable=False),
    sa.CheckConstraint("role in ('admin','user')", name='ck_users_role'),
    sa.PrimaryKeyConstraint('username')
    )
    op.create_table('payments',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.String(), nullable=False),
    sa.Column('receipt_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('amount_cents', sa.Integer(), nullable=False),
    sa.Column('external_payment_id', sa.String(), nullable=True),
    sa.Column('checkout_url', sa.Text(), nullable=True),
    sa.Column('idempotency_key', sa.String(), nullable=True),
    sa.Column('created_at', sa.String(), nullable=False),
    sa.Column('updated_at', sa.String(), nullable=False),
    sa.CheckConstraint("status in ('pending','succeeded','failed','canceled')", name='ck_payments_status'),
    sa.CheckConstraint('amount_cents >= 0', name='ck_payments_amount_ge_0'),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('external_payment_id', name='uq_payments_external_payment_id')
    )
    op.create_index('idx_payments_receipt', 'payments', ['receipt_id'], unique=False)
    op.create_index('idx_payments_status', 'payments', ['status'], unique=False)
    op.create_table('receipt_items',
    sa.Column('receipt_id', sa.Integer(), nullable=False),
    sa.Column('job_key', sa.String(), nullable=False),
    sa.Column('job_id_display', sa.String(), nullable=False),
    sa.Column('cost', sa.Float(), nullable=False),
    sa.Column('cpu_core_hours', sa.Float(), nullable=False),
    sa.Column('gpu_hours', sa.Float(), nullable=False),
    sa.Column('mem_gb_hours', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['receipt_id'], ['receipts.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('receipt_id'),
    sa.UniqueConstraint('job_key')
    )
    op.create_index('idx_items_receipt', 'receipt_items', ['receipt_id'], unique=False)
    # ### end Alembic commands ###
    op.create_index(
        "uq_payments_provider_idem_notnull",
        "payments",
        ["provider", "idempotency_key"],
        unique=True,
        postgresql_where=sa.text("idempotency_key IS NOT NULL"),
    )


def downgrade() -> None:
    """Downgrade schema."""
    op.drop_index("uq_payments_provider_idem_notnull", table_name="payments")
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_items_receipt', table_name='receipt_items')
    op.drop_table('receipt_items')
    op.drop_index('idx_payments_status', table_name='payments')
    op.drop_index('idx_payments_receipt', table_name='payments')
    op.drop_table('payments')
    op.drop_table('users')
    op.drop_table('receipts')
    op.drop_table('rates')
    op.drop_table('payment_events')
    op.drop_index('idx_auth_throttle_user_ip', table_name='auth_throttle')
    op.drop_table('auth_throttle')
    op.drop_table('audit_log')
    # ### end Alembic commands ###
